name: Tests & CodeQuality Workflow
run-name:  Tests & CodeQuality workflow at ${{ github.ref }}
on: [push]
jobs:
  checking:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
      - name: Setup libraries
        run: |
          cd frontend/
          uv sync
          uv pip install --editable .[dev]
      - name: Run Ruff linter
        run: |
          cd backend/
          uv run pre-commit run --all-files

  build-frontend:
    needs: [checking]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
      - name: Setup libraries
        run: |
          cd frontend/
          uv sync
          uv pip install --editable .
      - name: Run frontned
        run: |
          cd frontend/
          uv run python manage.py runserver 0.0.0.0:8005 &
      - name: Проверка демона
        run: |
          sleep 5
          curl -f http://localhost:8005/frontend_health_check/  # Проверка доступности

  test-frontend-javascript:
    needs: [build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install node & npm to launch javascript tests
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install all necessary packages
        run: |
          cd frontend/
          npm install
      - name: Run tests
        run: |
          cd frontend/
          npm test -- --coverage
      - name: Upload JavaScript coverage
        uses: actions/upload-artifact@v4
        with:
          name: js-coverage
          path: frontend/coverage/
          retention-days: 1

  test-frontend-django:
    needs: [build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
      - name: Setup libraries
        run: |
          cd frontend/
          uv sync
          uv pip install --editable '.[dev]'
      - name: Run tests
        run: |
          cd frontend/
          uv run pytest --cov=app --cov-report=xml:coverage/django-coverage.xml app/tests/test_views.py
      - name: Upload Django coverage
        uses: actions/upload-artifact@v4
        with:
          name: django-coverage
          path: frontend/coverage/django-coverage.xml
          retention-days: 1

  test-backend:
    needs: [checking]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
      - name: Setup libraries
        run: |
          cd backend/
          uv sync
          uv pip install --editable '.[dev]'
      - name: Run Backend Tests
        run: |
          cd backend/
          LITESTAR_WARN_IMPLICIT_SYNC_TO_THREAD=0 uv run pytest --cov . --cov-report=term --cov-report=xml:coverage/coverage.xml
      - name: Upload Backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/coverage.xml
          retention-days: 1

  test-embedder:
    needs: [checking]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
      - name: Setup libraries
        run: |
          cd embedder/
          uv sync
          uv pip install --editable '.[dev]'
      - name: Run Embedder Tests
        run: |
          cd embedder/
          LITESTAR_WARN_IMPLICIT_SYNC_TO_THREAD=0 uv run pytest --cov . --cov-report=term --cov-report=xml:coverage/coverage.xml
      - name: Upload Embedder coverage
        uses: actions/upload-artifact@v4
        with:
          name: embedder-coverage
          path: embedder/coverage/coverage.xml
          retention-days: 1

  test-bot:
    needs: [checking]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
      - name: Setup libraries
        run: |
          cd bot/
          uv sync
          uv pip install --editable '.[dev]'
      - name: Run Bot Tests
        run: |
          cd bot/
          uv run pytest --cov . --cov-report=term --cov-report=xml:coverage/coverage.xml
      - name: Upload Bot coverage
        uses: actions/upload-artifact@v4
        with:
          name: bot-coverage
          path: bot/coverage/coverage.xml
          retention-days: 1



  verify-coverage:
    needs: [test-frontend-javascript, test-frontend-django, test-backend, test-embedder, test-bot]
    runs-on: ubuntu-latest
    steps:
      - name: Download JavaScript coverage
        uses: actions/download-artifact@v4
        with:
          name: js-coverage
          path: frontend/coverage
      - name: Download Django coverage
        uses: actions/download-artifact@v4
        with:
          name: django-coverage
          path: frontend/coverage
      - name: Download Backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage
      - name: Download Embedder coverage
        uses: actions/download-artifact@v4
        with:
          name: embedder-coverage
          path: embedder/coverage
      - name: Download Bot coverage
        uses: actions/download-artifact@v4
        with:
          name: bot-coverage
          path: bot/coverage

      - name: Check coverage reports existence
        run: |
          # Check Frontend JavaScript coverage
          if [ ! -f "frontend/coverage/lcov.info" ]; then
            echo "Frontend JavaScript coverage report not found!"
            exit 1
          fi

          # Check Frontend Django coverage
          if [ ! -f "frontend/coverage/django-coverage.xml" ]; then
            echo "Frontend Django coverage report not found!"
            exit 1
          fi

          # Check Backend Test coverage
          if [ ! -f "backend/coverage/coverage.xml" ]; then
            echo "Backend coverage report not found!"
            exit 1
          fi

          # Check Embedder Test coverage
          if [ ! -f "embedder/coverage/coverage.xml" ]; then
            echo "Embedder coverage report not found!"
            exit 1
          fi

          # Check Bot Test coverage
          if [ ! -f "bot/coverage/coverage.xml" ]; then
            echo "Bot coverage report not found!"
            exit 1
          fi


          echo "All coverage reports are present!"

  setup-remote-info:
    runs-on: ubuntu-latest
    outputs:
      monitoring-ip: ${{ steps.monitoring-ip-getter.outputs.value}}
      sonar-token: ${{steps.sonar-token-getter.outputs.value}}
      kubernetes-cluster-ip: ${{ steps.kubernetes-cluster-ip-getter.outputs.value }}

    steps:
      - name: Install yc
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /opt/yc
          source "/home/runner/.bashrc"

      - name: List All Compute Instances
        run: |
          /opt/yc/bin/yc \
            --token ${{ secrets.YC_OATH_TOKEN }} \
            --folder-id ${{ secrets.YC_FOLDER_ID }} \
            --cloud-id ${{ secrets.YC_CLOUD_ID }} \
            compute instance list

      - name: Get Kubernetes cluster VM IP
        id: kubernetes-cluster-ip-getter
        run: |
          JSON_RESPONSE=$(
            /opt/yc/bin/yc \
              --token ${{ secrets.YC_OATH_TOKEN }} \
              --folder-id ${{ secrets.YC_FOLDER_ID }} \
              --cloud-id ${{ secrets.YC_CLOUD_ID }} \
              compute instance get book-app-vm --format json
          )
          KUBERNETES_CLUSTER_VM_IP=$(echo "$JSON_RESPONSE" | jq -r '.network_interfaces[0].primary_v4_address.one_to_one_nat.address')
          echo "value=$KUBERNETES_CLUSTER_VM_IP" >> $GITHUB_OUTPUT

      - name: Get Monitoring-VM IP
        id: monitoring-ip-getter
        run: |
          JSON_RESPONSE=$(
            /opt/yc/bin/yc \
              --token ${{ secrets.YC_OATH_TOKEN }} \
              --folder-id ${{ secrets.YC_FOLDER_ID }} \
              --cloud-id ${{ secrets.YC_CLOUD_ID }} \
              compute instance get monitoring-vm --format json
          )
          MONITORING_IP=$(echo "$JSON_RESPONSE" | jq -r '.network_interfaces[0].primary_v4_address.one_to_one_nat.address')
          echo "value=$MONITORING_IP" >> $GITHUB_OUTPUT

      - name: Get Sonar Token
        id: sonar-token-getter
        # вытаскиваю переменную из соседнего step'а
        env:
          MONITORING_IP: ${{ steps.monitoring-ip-getter.outputs.value }}
        run: |
          mkdir -vm 700 /home/runner/.ssh
          ssh-keyscan -Ht ed25519 $MONITORING_IP > /home/runner/.ssh/known_hosts
          echo "${{ secrets.SSH_KEY }}" > /home/runner/.ssh/id_ed25519
          chmod 600 /home/runner/.ssh/id_ed25519
          scp ubuntu@$MONITORING_IP:/home/ubuntu/sonar_token.txt /home/runner/sonar_token.txt
          echo "value=$(cat /home/runner/sonar_token.txt)" >> $GITHUB_OUTPUT

  sonarqube:
    runs-on: ubuntu-latest
    needs: [verify-coverage, setup-remote-info]
    env:
      SONAR_HOST_URL: http://${{needs.setup-remote-info.outputs.monitoring-ip}}:9000
      SONAR_TOKEN: ${{needs.setup-remote-info.outputs.sonar-token}}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download JavaScript coverage
      uses: actions/download-artifact@v4
      with:
        name: js-coverage
        path: frontend/coverage
    - name: Download Django coverage
      uses: actions/download-artifact@v4
      with:
        name: django-coverage
        path: frontend/coverage
    - name: Download Backend coverage
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage
    - name: Download Embedder coverage
      uses: actions/download-artifact@v4
      with:
        name: embedder-coverage
        path: embedder/coverage
    - name: Download Bot coverage
      uses: actions/download-artifact@v4
      with:
        name: bot-coverage
        path: bot/coverage

    - name: Echo Vars
      run: echo "Sonar URL $SONAR_HOST_URL, SonarQube Token $SONAR_TOKEN"

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@v1.1.0

    - name: Quality Status
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"


  docker-build-publish:
    runs-on: ubuntu-latest
    needs: [setup-remote-info, sonarqube]
    permissions:
      contents: read
      packages: write
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short
      - name: Build and push Backend image
        uses: docker/build-push-action@v3
        with:
                context: backend
                push: ${{ github.event_name != 'pull_request' }}
                tags: ${{ steps.meta-backend.outputs.tags }}
                labels: ${{ steps.meta-backend.outputs.labels }}


      - name: Extract metadata for Embedder
        id: meta-embedder
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/embedder
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short
      - name: Build and push Embedder image
        uses: docker/build-push-action@v3
        with:
                context: embedder
                push: ${{ github.event_name != 'pull_request' }}
                tags: ${{ steps.meta-embedder.outputs.tags }}
                labels: ${{ steps.meta-embedder.outputs.labels }}
      - name: Extract metadata for Bot
        id: meta-bot
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/bot
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Bot image
        uses: docker/build-push-action@v3
        with:
          context: bot
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-bot.outputs.tags }}
          labels: ${{ steps.meta-bot.outputs.labels }}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Frontend image
        uses: docker/build-push-action@v3
        with:
          context: frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}

  get-tag-value:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      tag-version: ${{ steps.tag-getter.outputs.value }}
    steps:
      - uses: actions/checkout@v2
      - name: Set output
        id: tag-getter
        run: echo "value=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [setup-remote-info, docker-build-publish, get-tag-value]
    env:
      VERSION: ${{needs.get-tag-value.outputs.tag-version}}
      KUBERNETES_CLUSTER_VM_IP: ${{ needs.setup-remote-info.outputs.kubernetes-cluster-ip }}
    steps:
      - name: Setup deploying ssh config
        run: |
          mkdir -vm 700 /home/runner/.ssh
          ssh-keyscan -Ht ed25519 $KUBERNETES_CLUSTER_VM_IP > /home/runner/.ssh/known_hosts
          echo "${{ secrets.SSH_KEY }}" > /home/runner/.ssh/id_ed25519
          chmod 600 /home/runner/.ssh/id_ed25519
      - name: Deploy everyone
        run: |
          ssh ubuntu@$KUBERNETES_CLUSTER_VM_IP kubectl set image deployment/frontend frontend=ghcr.io/rkrisanoff/devops-spring-2025/frontend:${VERSION:1}
          ssh ubuntu@$KUBERNETES_CLUSTER_VM_IP kubectl set image deployment/backend backend=ghcr.io/rkrisanoff/devops-spring-2025/backend:${VERSION:1}
          ssh ubuntu@$KUBERNETES_CLUSTER_VM_IP kubectl set image deployment/embedder embedder=ghcr.io/rkrisanoff/devops-spring-2025/embedder:${VERSION:1}
          ssh ubuntu@$KUBERNETES_CLUSTER_VM_IP kubectl set image deployment/bot bot=ghcr.io/rkrisanoff/devops-spring-2025/bot:${VERSION:1}
