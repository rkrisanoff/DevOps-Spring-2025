services:

  postgres:
    image: pgvector/pgvector:pg17
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-vector.sql:/docker-entrypoint-initdb.d/01-init-vector.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


  migrator:
    build:
      context: backend/
      dockerfile: ./Dockerfile
    entrypoint: uv run alembic --config=./etc/alembic.ini upgrade head
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ALEMBIC_POSTGRES_DATABASE=postgres
      - ALEMBIC_POSTGRES_USER=postgres
      - ALEMBIC_POSTGRES_PASSWORD=postgres
      - ALEMBIC_POSTGRES_HOST=postgres
      - ALEMBIC_POSTGRES_PORT=5432

    restart: "no"


  backend:
    build:
      context: backend/
      dockerfile: ./Dockerfile
    ports:
      - "8001:8000"
    depends_on:
      migrator:
        condition: service_completed_successfully
      embedder:
        condition: service_healthy

    environment:
      - PROJECT_POSTGRES_DATABASE=postgres
      - PROJECT_POSTGRES_USER=postgres
      - PROJECT_POSTGRES_PASSWORD=postgres
      - PROJECT_POSTGRES_HOST=postgres
      - PROJECT_POSTGRES_PORT=5432
      - PROJECT_COMMON_VERSION=0.4.0
      - PROJECT_EMBEDDER_HOST=embedder
      - PROJECT_EMBEDDER_PORT=9999
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8000/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  embedder:
    build:
      context: embedder/
      dockerfile: ./Dockerfile
    ports:
      - "9999:9999"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://embedder:9999/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  bot:
    build:
      context: bot/
      dockerfile: ./Dockerfile

    environment:
      - BOT_TOKEN=''
      - BOT_BACKEND_HOST=backend
      - BOT_BACKEND_PORT=8000

  frontend:
    build:
      context: frontend/
      dockerfile: ./Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - BACKEND_HOST=backend
      - BACKEND_PORT=8000
    ports:
      - "8002:8005"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://frontend:8005/frontend_health_check/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
